{"version":3,"sources":["MicrophoneAccess.js","Timer.js","Recorder.js","AudioPlayer.js","DownloadButton.js","NewRecordingButton.js","App.js","serviceWorker.js","index.js"],"names":["MicrophoneAccess","props","getMicrophone","bind","navigator","mediaDevices","getUserMedia","audio","video","stream","this","getStreamData","Fragment","Button","size","onClick","Component","Timer","state","duration","dateStart","refreshTimer","displayDuration","elapsedTime","Math","floor","seconds","minutes","hours","toString","length","Date","setState","timerStarted","timerID","setInterval","clearInterval","className","Recorder","idRecordButton","enableRecordButton","enableStopButton","startRecording","stopRecording","audioContext","window","AudioContext","webkitAudioContext","source","createMediaStreamSource","gainNode","createGain","initialVol","gain","value","connect","mediaRecorder","MediaRecorder","error","getErrorDueToMediaRecorder","chunks","onstop","event","fileName","prompt","blob","Blob","audioURL","URL","createObjectURL","getRecordedAudioURLAndFileName","ondataavailable","push","data","onError","getErrorFromRecorder","name","disconnect","start","stop","id","disabled","AudioPlayer","controls","src","DownloadButton","href","download","NewRecordingButton","show","onOK","handleClose","handleShow","setNewRecording","Modal","onHide","centered","Header","closeButton","Title","Body","Footer","App","streamAvailable","showAlert","alertMessage","document","title","streamData","recorderAlert","mediaRecorderAlert","Navbar","variant","Brand","icon","faMicrophone","Alert","Container","Jumbotron","Row","Col","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ac3f0420.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap/';\nimport PropTypes from 'prop-types'\n\n\nclass MicrophoneAccess extends Component {\n  constructor(props) {\n    super(props);\n    this.getMicrophone = this.getMicrophone.bind(this);\n  }\n\n  async getMicrophone() {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      });\n      this.props.getStreamData(stream)\n    }\n    catch {\n      return (\n        this.props.getStreamData(\"error\")\n      )\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n          <Button size=\"lg\" onClick={this.getMicrophone}>\n            Allow microphone input\n          </Button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MicrophoneAccess;\n\n\nMicrophoneAccess.propTypes = {\n  getStreamData: PropTypes.func.isRequired\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\tduration: null,\n\t\t\tdateStart: null,\n\t\t}\n\t\tthis.refreshTimer = this.refreshTimer.bind(this)\n\t\tthis.displayDuration = this.displayDuration.bind(this)\n\t};\n\n\tdisplayDuration(elapsedTime) {\n\t\tlet duration = Math.floor(elapsedTime/1000)\n\t\tlet seconds = duration % 60;\n\t\tlet minutes = Math.floor(duration/60) % 60\n\t\tlet hours = Math.floor(duration/60/60)\n\n\t\t// add zero if single digit\n\t\tif (seconds.toString().length === 1) {\n\t\t\tseconds = `0${seconds}`\n\t\t}\n\t\tif (minutes.toString().length === 1) {\n\t\t\tminutes = `0${minutes}`\n\t\t}\n\t\tif (hours.toString().length === 1) {\n\t\t\thours = `0${hours}`\n\t\t}\n\t\treturn `${hours}:${minutes}:${seconds}`\n\t}\n\n\trefreshTimer() {\n\t\tlet dateNow = new Date()\n\t\tlet elapsedTime = dateNow - this.state.dateStart;\n\t\tlet duration = this.displayDuration(elapsedTime)\n\t\tthis.setState({duration: duration});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.timerStarted && this.state.dateStart === null) {\n\t\t\tlet dateStart = new Date()\n\t\t\tthis.setState({dateStart: dateStart})\n\t\t\tthis.timerID = setInterval(\n\t      () => this.refreshTimer(),\n\t      500\n\t    )\n\t\t}\n\t}\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n\trender() {\n    return (\n    \t<div className=\"timer\">\n\t\t\t\t<div>\n\t\t\t\t\t{this.state.duration ? this.state.duration : \"00:00:00\"}\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default Timer;\n\n\nTimer.propTypes = {\n\ttimerStarted: PropTypes.bool.isRequired,\n};\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Timer from './Timer';\nimport PropTypes from 'prop-types'\n\n\nclass Recorder extends Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\ttimerStarted: false,\n\t\t\tidRecordButton: \"\",\n\t\t\tenableRecordButton: true,\n\t\t\tenableStopButton: true,\n\t\t};\n\n\t\tthis.startRecording = this.startRecording.bind(this);\n\t\tthis.stopRecording = this.stopRecording.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    this.source = this.audioContext.createMediaStreamSource(this.props.stream);\n    \n    // Connect different audio modules/audio graph nodes together\n    // Setting up gain\n\t\tthis.gainNode = this.audioContext.createGain();\n\t\tthis.initialVol = 0.75;\n\t\tthis.gainNode.gain.value = this.initialVol;\n\t\tthis.source.connect(this.gainNode);\n\n\t\ttry {\n\t\t\t// Creating a mediaRecorder\n\t\t\tthis.mediaRecorder = new MediaRecorder(this.props.stream);\n\t\t} catch (error) {\n\t\t\t// catch error if Media Recorder API is not supported\n\t\t\tthis.props.getErrorDueToMediaRecorder(error)\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// setting up recorded audio snippets\n\t\tvar chunks = [];\n\n\t\tthis.mediaRecorder.onstop = function(event) {\n\t\t\tvar fileName = prompt(\"Please enter a name for your sound clip.\", \n\t\t\t\t\"Audio 1\")\n\t\t\tif (fileName === null) {\n\t\t\t\tfileName = \"Audio 1\"\n\t\t\t}\n\t  \tvar blob = new Blob(chunks, {'type' : 'audio/mp4'});\n\t  \t// reset chunks for a new file \n\t  \tchunks = [];\n\t  \tvar audioURL = URL.createObjectURL(blob);\n\t  \tthis.props.getRecordedAudioURLAndFileName(audioURL, `${fileName}.mp4`);\n\t\t}.bind(this);\n\n\t\tthis.mediaRecorder.ondataavailable = function(event) {\n\t\t\tchunks.push(event.data);\n\t\t}\n\t\tthis.mediaRecorder.onError = function(event) {\n\t\t\tthis.props.getErrorFromRecorder(event.error.name)\n\t\t}\n  }\n\n  componentWillUnmount() {\n    this.source.disconnect();\n  }\n\n  startRecording() {\n  \tthis.setState({\n  \t\ttimerStarted: true, \n  \t\tidRecordButton: \"record\", \n  \t\tenableStopButton: true, \n  \t\tenableRecordButton: false\n  \t})\n  \tthis.mediaRecorder.start();\n  }\n\n  stopRecording() {\n  \tif (this.state.timerStarted) {\n\t  \tthis.mediaRecorder.stop();\n\t  \tthis.setState({\n\t  \t\ttimerStarted: false, \n\t  \t\tidRecordButton: \"\",\n\t  \t\tenableStopButton: false, \n\t  \t\tenableRecordButton: true\n\t  \t})\n  \t}\n  }  \n\n  render() {\n    return (\n\t\t\t<div className=\"recorder\">\n\t\t\t\t<Timer timerStarted={this.state.timerStarted} />\n\t\t\t\t<Button size=\"lg\" \n\t\t\t\t\t\t\t\tclassName=\"recordButton\"\n\t\t\t\t\t\t\t\tid={this.state.idRecordButton} \n\t\t\t\t\t\t\t\tonClick={this.startRecording}\n\t\t\t\t\t\t\t\tdisabled={!this.state.enableRecordButton}>\n\t\t\t\t\t\t\t\tRecord\n\t\t\t\t</Button>\n\t\t\t\t<Button size=\"lg\" \n\t\t\t\t\t\t\t\tclassName=\"stopButton\"\n\t\t\t\t\t\t\t\tid=\"stop\" \n\t\t\t\t\t\t\t\tonClick={this.stopRecording}\n\t\t\t\t\t\t\t\tdisabled={!this.state.enableStopButton}>\n\t\t\t\t\t\t\t\tStop\n\t\t\t\t</Button>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default Recorder;\n\n\nRecorder.propTypes = {\n  stream: PropTypes.object.isRequired,\n  getRecordedAudioURLAndFileName: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\n\nclass AudioPlayer extends Component {\n\trender() {\n    return (\n\t\t\t<div>\n\t\t\t\t<h3>{this.props.fileName}</h3>\n\t\t\t\t<audio controls \n\t\t\t\t\tsrc={this.props.audioURL}\n\t\t\t\t/>\n\t\t\t</div>\n    );\n  }\n}\n\nexport default AudioPlayer;\n\n\nAudioPlayer.propTypes = {\n\tfileName: PropTypes.string.isRequired,\n\taudioURL: PropTypes.string.isRequired\n};\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types'\n\n\nclass DownloadButton extends Component {\n\trender() {\n    return (\n\t\t\t<React.Fragment>\n\t\t\t\t<Button size=\"lg\" href={this.props.audioURL} download={this.props.fileName}>Download this audio</Button>\n\t\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default DownloadButton;\n\n\nDownloadButton.propTypes = {\n\tfileName: PropTypes.string.isRequired,\n\taudioURL: PropTypes.string.isRequired\n};\n","import React, { Component } from 'react';\nimport {Button, Modal} from 'react-bootstrap/';\nimport PropTypes from 'prop-types'\n\n\nclass NewRecordingButton extends Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\tshow: false,\n\t\t}\n\n\t\tthis.onOK = this.onOK.bind(this);\n\t\tthis.handleClose = this.handleClose.bind(this);\n\t\tthis.handleShow = this.handleShow.bind(this);\n\t};\n\n\tonOK() {\n\t\tthis.props.setNewRecording()\n\t\tthis.handleClose()\n\t}\n\n\thandleClose() {\n\t\tthis.setState({show: false})\n\t}\n\n\thandleShow() {\n\t\tthis.setState({show: true})\n\t}\n\n\trender() {\n    return (\n\t\t\t<React.Fragment>\n\t\t\t\t<Button className=\"new-recording\" size=\"lg\" onClick={this.handleShow}>Start a new recording</Button>\n\t\t\t\t<Modal className=\"new-recording\" show={this.state.show} onHide={this.handleClose} centered>\n\t\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t\t<Modal.Title>\n\t\t\t\t\t\t\tStart a new Recording\n\t\t\t\t\t\t</Modal.Title>\n\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\tDid you save your previous recording? \n\t\t\t\t\t\tIf yes, press OK. If not, please cancel and save it, if you want to keep it.\n\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t<Button className=\"modal-button-cancel\" onClick={this.handleClose}>Cancel</Button>\n\t\t\t\t\t\t<Button className=\"modal-button-ok\" onClick={this.onOK}>OK</Button>\n\t\t\t\t\t</Modal.Footer>\n\t\t\t\t</Modal>\n\t\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default NewRecordingButton;\n\n\nNewRecordingButton.propTypes = {\n  setNewRecording: PropTypes.func.isRequired\n};\n","import React, { Component } from 'react';\nimport { Navbar, Container, Jumbotron, Row, Col, Alert } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nimport MicrophoneAccess from './MicrophoneAccess';\nimport Recorder from './Recorder';\nimport AudioPlayer from './AudioPlayer';\nimport DownloadButton from './DownloadButton';\nimport NewRecordingButton from './NewRecordingButton';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\taudioURL: null,\n\t\t\tstreamAvailable: false,\n\t\t\tfileName: null,\n\t\t\tshowAlert: false,\n\t\t\talertMessage: \"\"\n\t\t};\n\t\tthis.getStreamData = this.getStreamData.bind(this);\n\t\tthis.getRecordedAudioURLAndFileName = this.getRecordedAudioURLAndFileName.bind(this);\n\t\tthis.getErrorFromRecorder = this.getErrorFromRecorder.bind(this);\n\t\tthis.getErrorDueToMediaRecorder = this.getErrorDueToMediaRecorder.bind(this);\n\t\tthis.setNewRecording = this.setNewRecording.bind(this);\n\t}\n\n  componentDidMount(){\n    document.title = \"Simple Sound Recorder\"\n  }\n\n\t// callback function for getting the stream of MicrophoneAccess component\n\tgetStreamData(streamData) {\n\t\tif (streamData === \"error\") {\n\t\t\tlet microphoneAccessAlert = \"It wasn't possible to access your microphone. Please reload this page and start again.\"\n\t\t\tthis.setState({showAlert: true, alertMessage: microphoneAccessAlert})\n\t\t} else {\n\t\t\tthis.setState({stream: streamData, streamAvailable: true})\n\t\t}\n\t} \n\t// callback function for getting the audioURL and fileName of recorded clip from Recorder component\n\tgetRecordedAudioURLAndFileName(audioURL, fileName) {\n\t\tthis.setState({audioURL: audioURL, fileName: fileName})\n\t}\n\n\tgetErrorFromRecorder(error) {\n\t\tlet recorderAlert = `It wasn't possible to start a recording. - ${error}`\n\t\tthis.setState({showAlert: true, alertMessage: recorderAlert})\n\t}\n\n\tgetErrorDueToMediaRecorder(error) {\n\t\tlet mediaRecorderAlert = `The sound recorder is not supported by Safari and Internet Explorer. \n\t\tPlease use another Browser. - ${error}`\n\t\tthis.setState({showAlert: true, alertMessage: mediaRecorderAlert, streamAvailable: false})\n\t}\n\n\tsetNewRecording() {\n\t\tthis.setState({audioURL: null, fileName: null})\n\t}\n\n  render() {\n  \treturn (\n  \t\t<React.Fragment>\n\t\t\t  <Navbar variant=\"dark\">\n\t\t\t    <Navbar.Brand>\n\t\t\t    \t<FontAwesomeIcon icon={faMicrophone}  className=\"d-inline-block align-top\"/>\n\t\t\t    \t{' '}Record your voice\n\t\t\t    </Navbar.Brand>\n\t\t\t  </Navbar>\n\t\t\t  <Alert variant=\"danger\" show={this.state.showAlert}>\n\t\t\t  \t{this.state.alertMessage}\n\t\t  \t</Alert>\n\t\t\t\t<Container className=\"main-container\">\n\t\t\t\t  <h1>Record Audio and Download it to Your Computer</h1>\n\t\t\t\t  <p>\n\t\t\t\t    You can record anything you like with this simple sound recorder.\n\t\t\t\t    After naming your file, you can download it to your computer. \n\t\t\t\t    The container of the file is mp4 with opus codex.\n\t\t\t\t  </p>\n\t\t\t\t  <Jumbotron>\n\t\t\t\t\t\t{!this.state.streamAvailable && (\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col className=\"recorder\">\n\t\t\t\t\t\t\t\t\t<MicrophoneAccess \n\t\t\t\t\t\t\t\t\t\tgetStreamData={this.getStreamData} \t\t\t\t\t \n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{this.state.streamAvailable && !this.state.fileName && (\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t<Recorder \n\t\t\t\t\t\t\t\t\t\tstream={this.state.stream} \n\t\t\t\t\t\t\t\t\t\tgetRecordedAudioURLAndFileName={this.getRecordedAudioURLAndFileName}\n\t\t\t\t\t\t\t\t\t\tgetErrorFromRecorder={this.getErrorFromRecorder}\n\t\t\t\t\t\t\t\t\t\tgetErrorDueToMediaRecorder={this.getErrorDueToMediaRecorder}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{this.state.audioURL && (\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col className=\"player\">\n\t\t\t\t\t\t\t\t\t<div className=\"Player\">\n\t\t\t\t\t\t\t\t\t\t<AudioPlayer audioURL={this.state.audioURL} fileName={this.state.fileName} />\n\t\t\t\t\t\t\t\t\t\t<DownloadButton audioURL={this.state.audioURL} fileName={this.state.fileName} />\n\t\t\t\t\t\t\t\t\t\t<NewRecordingButton setNewRecording={this.setNewRecording}/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Jumbotron>\n\t\t    </Container>\n\t    </React.Fragment>\n  \t)\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}